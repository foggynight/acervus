(declare (unit lexer)
         (uses global)
         (uses string)
         (uses token))

(import (chicken io)
        (chicken string))

(define (lex-word word)
  (make-token (cond ((char=? (first-char word) (directive-char)) 'directive)
                    ((and (char=? (last-char word) (label-char))
                          (not (= (string-length word) 1)))
                     'label)
                    ((and (char=? (first-char word) (location-char))
                          (not (= (string-length word) 1)))
                     'location)
                    ((string-alphabetic? word) 'instruction)
                    ((string-numeric? word) 'number)
                    (else (error "acervus: lexer error: invalid word")))
              word))

(define (lex-line line)
  (define len (string-length line))
  (do ((i 0 (+ i 1))
       (tokens '()))
      ((>= i len) (reverse tokens))
    (let ((c (string-ref line i)))
      (cond ((char-whitespace? c))
            ((char=? c (comment-char)) (set! i (- len 1)))
            ((or (char=? c (char-delim)) (char=? c (string-delim)))
             (let ((targ (find-char c line (+ i 1))))
               (cond ((not targ) (error "acervus: lexer error: missing delimiter"))
                     ((and (char=? c (char-delim)) (= targ (+ i 1)))
                      (error "acervus: lexer error: zero-length character"))
                     (else (let* ((word (substring line i (+ targ 1)))
                                  (tok (make-token (if (char=? c (char-delim))
                                                       'character 'string)
                                                   word)))
                             (set! i (+ i (string-length word)))
                             (set! tokens (cons tok tokens)))))))
            (else (let* ((word (next-word line i))
                         (tok (lex-word word)))
                    (set! i (+ i (string-length word)))
                    (set! tokens (cons tok tokens))))))))

(define (lex-loop #!optional (line (read-line)))
  (if (eof-object? line)
      '()
      (cons (lex-line line) (lex-loop))))

(define (lex-file path)
  (with-input-from-file path
    lex-loop))

(define (lex-stdin)
  (lex-loop))
